// GuardianPulse Database Schema
// Personal Safety Application with AI-powered monitoring

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// User Model
// Stores user account information for the GuardianPulse platform
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User profile and preferences
  isActive       Boolean @default(true)
  emailVerified  Boolean @default(false)
  lastLoginAt    DateTime?
  
  // Privacy and security settings
  privacyLevel   String  @default("standard") // standard, high, maximum
  
  // Guardian & Ward Relationships
  // Invitations sent by this user to invite others as guardians
  sentInvitations     GuardianInvitation[] @relation("InviterUser")
  
  // Guardian relationships where this user is the ward (being protected)
  asWard              GuardianRelationship[] @relation("WardUser")
  
  // Guardian relationships where this user is the guardian (protecting others)
  asGuardian          GuardianRelationship[] @relation("GuardianUser")
  
  // Indexes for performance
  @@map("users")
  @@index([email])
  @@index([createdAt])
  @@index([isActive])
}

// Guardian Invitation Model
// Represents invitations sent from a Ward to potential Guardians
model GuardianInvitation {
  id            String           @id @default(cuid())
  inviterId     String
  inviteeEmail  String
  status        InvitationStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations
  inviter       User             @relation("InviterUser", fields: [inviterId], references: [id], onDelete: Cascade)
  
  // Additional invitation metadata
  message       String?          // Optional personal message from inviter
  expiresAt     DateTime?        // Optional expiration date for invitation
  
  // Indexes for performance
  @@map("guardian_invitations")
  @@index([inviterId])
  @@index([inviteeEmail])
  @@index([status])
  @@index([createdAt])
  // Unique constraint to prevent duplicate pending invitations
  @@unique([inviterId, inviteeEmail], name: "unique_invitation_per_email")
}

// Guardian Relationship Model
// Represents an accepted connection between a Ward and Guardian
model GuardianRelationship {
  id          String   @id @default(cuid())
  wardId      String
  guardianId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  ward        User     @relation("WardUser", fields: [wardId], references: [id], onDelete: Cascade)
  guardian    User     @relation("GuardianUser", fields: [guardianId], references: [id], onDelete: Cascade)
  
  // Additional relationship metadata
  isActive    Boolean  @default(true)    // Can be deactivated without deleting
  permissions String[] @default([])      // JSON array of permissions granted to guardian
  
  // Indexes for performance
  @@map("guardian_relationships")
  @@index([wardId])
  @@index([guardianId])
  @@index([isActive])
  @@index([createdAt])
  // Compound unique constraint to prevent duplicate relationships
  @@unique([wardId, guardianId], name: "unique_ward_guardian_pair")
}

// Additional models can be added here for future features:
// - Incident reports
// - Emergency contacts
// - Location tracking
// - AI monitoring sessions
// - Alert preferences

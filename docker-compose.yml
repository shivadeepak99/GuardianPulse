version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: guardian-pulse-postgres
    environment:
      POSTGRES_USER: guardianpulse
      POSTGRES_PASSWORD: guardian_secure_2025
      POSTGRES_DB: guardianpulse_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U guardianpulse -d guardianpulse_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - guardian-pulse-network

  # Redis In-Memory Data Store
  redis:
    image: redis:alpine
    container_name: guardian-pulse-redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - guardian-pulse-network

  api:
    build:
      context: ./packages/api
      dockerfile: Dockerfile
      target: production
    container_name: guardian-pulse-api
    ports:
      - "8080:8080"
    env_file:
      - ./packages/api/.env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://guardianpulse:guardian_secure_2025@guardian-pulse-postgres:5432/guardianpulse_db
      - REDIS_URL=redis://guardian-pulse-redis:6379
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - guardian-pulse-network

  # Development service with hot-reloading
  api-dev:
    build:
      context: ./packages/api
      dockerfile: Dockerfile
      target: builder
    container_name: guardian-pulse-api-dev
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://guardianpulse:guardian_secure_2025@postgres:5432/guardianpulse_db
      - REDIS_URL=redis://redis:6379
    volumes:
      # Mount source code for hot-reloading
      - ./packages/api/src:/app/src:ro
      - ./packages/api/package.json:/app/package.json:ro
      - ./packages/api/tsconfig.json:/app/tsconfig.json:ro
      # Exclude node_modules to avoid conflicts
      - /app/node_modules
    command: ["pnpm", "dev"]
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - dev
    networks:
      - guardian-pulse-network

  # n8n Workflow Automation Service
  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    container_name: guardian-pulse-n8n
    ports:
      - "5678:5678"
    environment:
      # Basic Configuration
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=guardian_admin
      - N8N_BASIC_AUTH_PASSWORD=guardian_n8n_2025
      
      # Database Configuration (use PostgreSQL)
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=guardian-pulse-postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_db
      - DB_POSTGRESDB_USER=guardianpulse
      - DB_POSTGRESDB_PASSWORD=guardian_secure_2025
      
      # Security & Performance
      - N8N_SECURE_COOKIE=false
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678
      
      # Integration Settings
      - N8N_PAYLOAD_SIZE_MAX=16
      - N8N_METRICS=true
      
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows:rw
      - ./n8n/credentials:/home/node/.n8n/credentials:rw
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - guardian-pulse-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local

networks:
  guardian-pulse-network:
    driver: bridge

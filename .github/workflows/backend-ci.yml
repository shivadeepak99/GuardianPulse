name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/api/**'
      - 'pnpm-lock.yaml'
      - 'package.json'
      - 'pnpm-workspace.yaml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'packages/api/**'
      - 'pnpm-lock.yaml'
      - 'package.json'
      - 'pnpm-workspace.yaml'

jobs:
  backend-tests:
    name: Backend API Tests
    runs-on: ubuntu-latest
    
    # PostgreSQL service for integration tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: guardian_test
          POSTGRES_PASSWORD: test_password_2025
          POSTGRES_DB: guardian_pulse_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # Test database configuration
      DATABASE_URL: postgresql://guardian_test:test_password_2025@localhost:5432/guardian_pulse_test
      DATABASE_URL_TEST: postgresql://guardian_test:test_password_2025@localhost:5432/guardian_pulse_test
      NODE_ENV: test
      
      # JWT configuration for tests
      JWT_SECRET: test_jwt_secret_for_ci_pipeline_2025
      JWT_EXPIRES_IN: 24h
      
      # AWS Mock configuration for tests
      AWS_ACCESS_KEY_ID: test_access_key
      AWS_SECRET_ACCESS_KEY: test_secret_key
      AWS_REGION: us-east-1
      AWS_S3_BUCKET: test-bucket
      
      # Logging configuration
      LOG_LEVEL: silent

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: 🎯 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗂️ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🔨 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build TypeScript
        run: pnpm --filter api build

      - name: 🔍 Run ESLint
        run: pnpm --filter api lint

      - name: 📊 Generate Prisma Client
        working-directory: packages/api
        run: |
          pnpm exec prisma generate
          pnpm exec prisma db push --force-reset

      - name: 🧪 Run Unit Tests
        run: pnpm --filter api test:unit
        env:
          NODE_ENV: test

      - name: 🔗 Run Integration Tests
        run: pnpm --filter api test:integration
        env:
          NODE_ENV: test
          TEST_TYPE: integration

      - name: 📈 Run Tests with Coverage
        run: pnpm --filter api test:coverage
        env:
          NODE_ENV: test

      - name: 📋 Upload Coverage Reports
        uses: codecov/codecov-action@v4
        with:
          file: packages/api/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: 💾 Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            packages/api/coverage/
            packages/api/test-results.xml
          retention-days: 30

  backend-security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: backend-tests
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 🔨 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🛡️ Run npm audit
        run: pnpm audit --audit-level moderate

      - name: 🔒 Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=packages/api/package.json

  backend-build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: backend-tests
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 🔨 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build for production
        run: pnpm --filter api build

      - name: ✅ Verify build output
        run: |
          if [ ! -d "packages/api/dist" ]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi
          if [ ! -f "packages/api/dist/index.js" ]; then
            echo "❌ Build failed: main entry point not found"
            exit 1
          fi
          echo "✅ Build verification successful"

      - name: 💾 Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: packages/api/dist/
          retention-days: 7

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [backend-tests, backend-security, backend-build-check]
    if: failure()
    
    steps:
      - name: 📧 Send failure notification
        run: |
          echo "❌ CI Pipeline Failed for commit ${{ github.sha }}"
          echo "🔗 View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🌿 Branch: ${{ github.ref_name }}"

  success-summary:
    name: Success Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, backend-security, backend-build-check]
    if: success()
    
    steps:
      - name: 🎉 Success notification
        run: |
          echo "✅ All CI checks passed for commit ${{ github.sha }}"
          echo "🧪 Tests: Passed"
          echo "🛡️ Security: Passed" 
          echo "🏗️ Build: Passed"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "👤 Author: ${{ github.actor }}"
